/*
 * CSS4 Variables with Fallbacks Using Sass
 * src: https://codepen.io/jakealbaugh/post/css4-variables-with-fallbacks-using-sass
 */

@import "space";
@import "grid";
@import "font";
@import "color";

// associate variable map name to an actual variable map
$var-maps: (
	space: $space,
	grid:  $grid,
	font:  $font,
	color: $color,
);

// which property uses which var map
// edit this for each property you want to use variables for
$props: (
	font-family:         (font, family),
	font-size:           (font, size),
	line-height:         (font, leading),
	background-color:    color,
	color:               color, // (color, (primary, secondary, shade)),
	border-color:        color,
	border-top-color:    color,
	border-right-color:  color,
	border-bottom-color: color,
	border-left-color:   color,
	fill:                color,
	height:              space,
	margin:              space,
	margin-top:          space,
	margin-right:        space,
	margin-bottom:       space,
	margin-left:         space,
	padding:             space,
	padding-top:         space,
	padding-right:       space,
	padding-bottom:      space,
	padding-left:        space,
	top:                 space,
	right:               space,
	bottom:              space,
	left:                space,
	width:               grid,
	max-width:           grid,
	min-width:           grid,
);

// the variable mixin takes a property and variable name
@mixin globalvar($prop, $var, $show-fall: true) {

	// get the property's map name(s)
	$map-name: map-get($props, $prop);
	$nest-name: null;
	$nest-map-name: null;
	$map: null;
	$var-fall: null;
	$var-output: null;

	// if a list, we need to go deeper
	@if type-of($map-name) == list {
		$nest-name: nth($map-name, 1);
		$nest-map-name: nth($map-name, 2);
	}

	// if it is a nested map
	@if $nest-name {
		// get the map from nested map-name
		$map: map-get($var-maps, $nest-name);
		// get the nested map
		$nest-map: map-get($map, $nest-map-name);
		// get the var value from the nested map
		$var-fall: map-get($nest-map, $var);
		@if $var == 0 {
			$var-output: 0;
		} @else {
			$var-output: var(--#{$nest-name}-#{$nest-map-name}-#{$var});
		}
	} @else {
		// get the map from map name
		$map: map-get($var-maps, $map-name);
		// fallback, grab the variable's value from the map
		$var-fall: map-get($map, $var);
		@if $var == 0 {
			$var-output: 0;
		} @else {
			$var-output: var(--#{$map-name}-#{$var});
		}
	}

	// if show standard is not overridden to be null
	@if $show-fall {
		#{$prop}: $var-fall;
	}

	// css4 variable output
	#{$prop}: $var-output;
}

// using it is magical

/*
body {
  @include globalvar(font-size, base);
  @include globalvar(font-family, body);
  @include globalvar(line-height, body);
  @include globalvar(background-color, background);

  // color it red if no CSS4 variables
  color: red;
  // override "show standard" with "null" which means no CSS4 support will still be red
  // if we didn't do this, it would create the fallback.
  @include globalvar(color, text, null);
}

h1, h2, h3, h4 {
  @include globalvar(line-height, heading);
  @include globalvar(font-family, heading);
}

h1 { @include globalvar(font-size, h1); }
h2 { @include globalvar(font-size, h2); }
h3 { @include globalvar(font-size, h3); }
h4 { @include globalvar(font-size, h4); }
*/